\BOOKMARK [1][-]{section.1}{Introduction}{}% 1
\BOOKMARK [1][-]{section.2}{Background and Overview}{}% 2
\BOOKMARK [2][-]{subsection.2.1}{Motivating Example}{section.2}% 3
\BOOKMARK [2][-]{subsection.2.2}{Challenges for Existing Approaches}{section.2}% 4
\BOOKMARK [2][-]{subsection.2.3}{Proposed Solution and System Overview}{section.2}% 5
\BOOKMARK [1][-]{section.3}{Selective Inlining}{}% 6
\BOOKMARK [2][-]{subsection.3.1}{Function Invocation Patterns}{section.3}% 7
\BOOKMARK [2][-]{subsection.3.2}{Inline Decision Algorithm}{section.3}% 8
\BOOKMARK [1][-]{section.4}{Function Filtering}{}% 9
\BOOKMARK [1][-]{section.5}{Scalable Function Matching}{}% 10
\BOOKMARK [2][-]{subsection.5.1}{K-length Partial Trace Extraction}{section.5}% 11
\BOOKMARK [2][-]{subsection.5.2}{Semantic Feature Extraction}{section.5}% 12
\BOOKMARK [2][-]{subsection.5.3}{Trace Pruning}{section.5}% 13
\BOOKMARK [3][-]{subsubsection.5.3.1}{Infeasible Partial Trace Pruning}{subsection.5.3}% 14
\BOOKMARK [3][-]{subsubsection.5.3.2}{Compiler Specific Code Pruning}{subsection.5.3}% 15
\BOOKMARK [2][-]{subsection.5.4}{Function Matching}{section.5}% 16
\BOOKMARK [1][-]{section.6}{Experimental Results}{}% 17
\BOOKMARK [2][-]{subsection.6.1}{Robustness}{section.6}% 18
\BOOKMARK [3][-]{subsubsection.6.1.1}{Answer to RQ1: Cross-architecture analysis.}{subsection.6.1}% 19
\BOOKMARK [3][-]{subsubsection.6.1.2}{Answer to RQ1: Cross-compiler analysis}{subsection.6.1}% 20
\BOOKMARK [3][-]{subsubsection.6.1.3}{Answer to RQ2: Cross-platform \(OS\) analysis}{subsection.6.1}% 21
\BOOKMARK [2][-]{subsection.6.2}{Answer to RQ3: Applications}{section.6}% 22
\BOOKMARK [2][-]{subsection.6.3}{Answer to RQ4: Scalability}{section.6}% 23
\BOOKMARK [2][-]{subsection.6.4}{Threats to Validity}{section.6}% 24
\BOOKMARK [1][-]{section.7}{Related Work}{}% 25
\BOOKMARK [1][-]{section.8}{Conclusion}{}% 26
